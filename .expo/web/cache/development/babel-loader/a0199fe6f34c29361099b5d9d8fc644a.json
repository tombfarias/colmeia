{"ast":null,"code":"\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() {\n    this.constructor = child;\n  }\n\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function (expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function literal(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    \"class\": function _class(expectation) {\n      var escapedParts = \"\",\n          i;\n\n      for (i = 0; i < expectation.parts.length; i++) {\n        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);\n      }\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n    any: function any(expectation) {\n      return \"any character\";\n    },\n    end: function end(expectation) {\n      return \"end of input\";\n    },\n    other: function other(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function classEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\\]/g, '\\\\]').replace(/\\^/g, '\\\\^').replace(/-/g, '\\\\-').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i,\n        j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n      peg$startRuleFunctions = {\n    transformList: peg$parsetransformList\n  },\n      peg$startRuleFunction = peg$parsetransformList,\n      peg$c0 = function peg$c0(ts) {\n    return ts;\n  },\n      peg$c1 = function peg$c1(t, ts) {\n    return multiply_matrices(t, ts);\n  },\n      peg$c2 = \"matrix\",\n      peg$c3 = peg$literalExpectation(\"matrix\", false),\n      peg$c4 = \"(\",\n      peg$c5 = peg$literalExpectation(\"(\", false),\n      peg$c6 = \")\",\n      peg$c7 = peg$literalExpectation(\")\", false),\n      peg$c8 = function peg$c8(a, b, c, d, e, f) {\n    return [a, c, e, b, d, f];\n  },\n      peg$c9 = \"translate\",\n      peg$c10 = peg$literalExpectation(\"translate\", false),\n      peg$c11 = function peg$c11(tx, ty) {\n    return [1, 0, tx, 0, 1, ty || 0];\n  },\n      peg$c12 = \"scale\",\n      peg$c13 = peg$literalExpectation(\"scale\", false),\n      peg$c14 = function peg$c14(sx, sy) {\n    return [sx, 0, 0, 0, sy === null ? sx : sy, 0];\n  },\n      peg$c15 = \"rotate\",\n      peg$c16 = peg$literalExpectation(\"rotate\", false),\n      peg$c17 = function peg$c17(angle, c) {\n    var cos = Math.cos(deg2rad * angle);\n    var sin = Math.sin(deg2rad * angle);\n\n    if (c !== null) {\n      var x = c[0];\n      var y = c[1];\n      return [cos, -sin, cos * -x + -sin * -y + x, sin, cos, sin * -x + cos * -y + y];\n    }\n\n    return [cos, -sin, 0, sin, cos, 0];\n  },\n      peg$c18 = \"skewX\",\n      peg$c19 = peg$literalExpectation(\"skewX\", false),\n      peg$c20 = function peg$c20(angle) {\n    return [1, Math.tan(deg2rad * angle), 0, 0, 1, 0];\n  },\n      peg$c21 = \"skewY\",\n      peg$c22 = peg$literalExpectation(\"skewY\", false),\n      peg$c23 = function peg$c23(angle) {\n    return [1, 0, 0, Math.tan(deg2rad * angle), 1, 0];\n  },\n      peg$c24 = function peg$c24(f) {\n    return parseFloat(f.join(\"\"));\n  },\n      peg$c25 = function peg$c25(i) {\n    return parseInt(i.join(\"\"));\n  },\n      peg$c26 = function peg$c26(n) {\n    return n;\n  },\n      peg$c27 = function peg$c27(n1, n2) {\n    return [n1, n2];\n  },\n      peg$c28 = \",\",\n      peg$c29 = peg$literalExpectation(\",\", false),\n      peg$c30 = function peg$c30(ds) {\n    return ds.join(\"\");\n  },\n      peg$c31 = function peg$c31(f) {\n    return f.join(\"\");\n  },\n      peg$c32 = function peg$c32(d) {\n    return d.join(\"\");\n  },\n      peg$c33 = peg$otherExpectation(\"fractionalConstant\"),\n      peg$c34 = \".\",\n      peg$c35 = peg$literalExpectation(\".\", false),\n      peg$c36 = function peg$c36(d1, d2) {\n    return [d1 ? d1.join(\"\") : null, \".\", d2.join(\"\")].join(\"\");\n  },\n      peg$c37 = /^[eE]/,\n      peg$c38 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c39 = function peg$c39(e) {\n    return [e[0], e[1], e[2].join(\"\")].join(\"\");\n  },\n      peg$c40 = /^[+\\-]/,\n      peg$c41 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c42 = /^[0-9]/,\n      peg$c43 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c44 = /^[ \\t\\r\\n]/,\n      peg$c45 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false),\n      peg$currPos = 0,\n      peg$savedPos = 0,\n      peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }],\n      peg$maxFailPos = 0,\n      peg$maxFailExpected = [],\n      peg$silentFails = 0,\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos],\n        p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n  }\n\n  function peg$parsetransformList() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsewsp();\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetransforms();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsewsp();\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsewsp();\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c0(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetransforms() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$parsetransform();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecommaWsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecommaWsp();\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetransforms();\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetransform();\n    }\n\n    return s0;\n  }\n\n  function peg$parsetransform() {\n    var s0;\n    s0 = peg$parsematrix();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetranslate();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsescale();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserotate();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseskewX();\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseskewY();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsematrix() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 6) === peg$c2) {\n      s1 = peg$c2;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c3);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWsp();\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsenumber();\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsecommaWsp();\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsenumber();\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecommaWsp();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsenumber();\n\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsecommaWsp();\n\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsenumber();\n\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsecommaWsp();\n\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsenumber();\n\n                                if (s15 !== peg$FAILED) {\n                                  s16 = [];\n                                  s17 = peg$parsewsp();\n\n                                  while (s17 !== peg$FAILED) {\n                                    s16.push(s17);\n                                    s17 = peg$parsewsp();\n                                  }\n\n                                  if (s16 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 41) {\n                                      s17 = peg$c6;\n                                      peg$currPos++;\n                                    } else {\n                                      s17 = peg$FAILED;\n\n                                      if (peg$silentFails === 0) {\n                                        peg$fail(peg$c7);\n                                      }\n                                    }\n\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c8(s5, s7, s9, s11, s13, s15);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetranslate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 9) === peg$c9) {\n      s1 = peg$c9;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c10);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspNumber();\n\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c7);\n                    }\n                  }\n\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescale() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 5) === peg$c12) {\n      s1 = peg$c12;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c13);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspNumber();\n\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c7);\n                    }\n                  }\n\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c14(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserotate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 6) === peg$c15) {\n      s1 = peg$c15;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c16);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspTwoNumbers();\n\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c7);\n                    }\n                  }\n\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c17(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewX() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 5) === peg$c18) {\n      s1 = peg$c18;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c19);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsewsp();\n\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsewsp();\n              }\n\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c6;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c7);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c20(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewY() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 5) === peg$c21) {\n      s1 = peg$c21;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c22);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsewsp();\n\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsewsp();\n              }\n\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c6;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c7);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c23(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsesign();\n\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsefloatingPointConstant();\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c24(s1);\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsesign();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseintegerConstant();\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1);\n      }\n\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspNumber() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c26(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspTwoNumbers() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecommaWsp();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsenumber();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c27(s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWsp() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewsp();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomma();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsewsp();\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsewsp();\n        }\n\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecomma();\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewsp();\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewsp();\n        }\n\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomma() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c28;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c29);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseintegerConstant() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c30(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsefloatingPointConstant() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsefractionalConstant();\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseexponent();\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c31(s1);\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsedigitSequence();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexponent();\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c32(s1);\n      }\n\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefractionalConstant() {\n    var s0, s1, s2, s3;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s2 = peg$c34;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c35);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedigitSequence();\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedigitSequence();\n\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c34;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c35);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c32(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c33);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexponent() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (peg$c37.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c38);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsesign();\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsedigitSequence();\n\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c39(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsesign() {\n    var s0;\n\n    if (peg$c40.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c41);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigitSequence() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parsedigit();\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsedigit();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c42.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c43);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewsp() {\n    var s0;\n\n    if (peg$c44.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c45);\n      }\n    }\n\n    return s0;\n  }\n\n  var deg2rad = Math.PI / 180;\n\n  function multiply_matrices(l, r) {\n    var al = l[0];\n    var cl = l[1];\n    var el = l[2];\n    var bl = l[3];\n    var dl = l[4];\n    var fl = l[5];\n    var ar = r[0];\n    var cr = r[1];\n    var er = r[2];\n    var br = r[3];\n    var dr = r[4];\n    var fr = r[5];\n    var a = al * ar + cl * br;\n    var c = al * cr + cl * dr;\n    var e = al * er + cl * fr + el;\n    var b = bl * ar + dl * br;\n    var d = bl * cr + dl * dr;\n    var f = bl * er + dl * fr + fl;\n    return [a, c, e, b, d, f];\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse\n};","map":{"version":3,"sources":["transform.js"],"names":["peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","name","Error","captureStackTrace","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","i","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","s","replace","describeExpectation","type","describeExpected","descriptions","j","sort","slice","join","describeFound","peg$parse","input","options","peg$FAILED","peg$startRuleFunctions","transformList","peg$parsetransformList","peg$startRuleFunction","peg$c0","ts","peg$c1","t","multiply_matrices","peg$c2","peg$c3","peg$literalExpectation","peg$c4","peg$c5","peg$c6","peg$c7","peg$c8","a","b","c","d","e","f","peg$c9","peg$c10","peg$c11","tx","ty","peg$c12","peg$c13","peg$c14","sx","sy","peg$c15","peg$c16","peg$c17","angle","cos","Math","deg2rad","sin","x","y","peg$c18","peg$c19","peg$c20","tan","peg$c21","peg$c22","peg$c23","peg$c24","parseFloat","peg$c25","parseInt","peg$c26","n","peg$c27","n1","n2","peg$c28","peg$c29","peg$c30","ds","peg$c31","peg$c32","peg$c33","peg$otherExpectation","peg$c34","peg$c35","peg$c36","d1","d2","peg$c37","peg$c38","peg$classExpectation","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","peg$computeLocation","peg$buildStructuredError","error","peg$buildSimpleError","ignoreCase","peg$anyExpectation","peg$endExpectation","peg$computePosDetails","pos","details","p","startPos","endPos","startPosDetails","endPosDetails","start","offset","peg$fail","push","s0","s1","s2","s3","s4","peg$parsewsp","peg$parsetransforms","peg$parsetransform","peg$parsecommaWsp","peg$parsematrix","peg$parsetranslate","peg$parsescale","peg$parserotate","peg$parseskewX","peg$parseskewY","s5","s6","s7","s8","s9","s10","s11","s12","s13","s14","s15","s16","s17","substr","peg$parsenumber","peg$parsecommaWspNumber","peg$parsecommaWspTwoNumbers","peg$parsesign","peg$parsefloatingPointConstant","peg$parseintegerConstant","peg$parsecomma","peg$parsedigitSequence","peg$parsefractionalConstant","peg$parseexponent","test","charAt","peg$parsedigit","PI","l","r","al","cl","el","bl","dl","fl","ar","cr","er","br","dr","fr","module","exports","SyntaxError","parse"],"mappings":"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","sourcesContent":["/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { transformList: peg$parsetransformList },\n      peg$startRuleFunction  = peg$parsetransformList,\n\n      peg$c0 = function(ts) { return ts; },\n      peg$c1 = function(t, ts) {\n              return multiply_matrices(t, ts);\n          },\n      peg$c2 = \"matrix\",\n      peg$c3 = peg$literalExpectation(\"matrix\", false),\n      peg$c4 = \"(\",\n      peg$c5 = peg$literalExpectation(\"(\", false),\n      peg$c6 = \")\",\n      peg$c7 = peg$literalExpectation(\")\", false),\n      peg$c8 = function(a, b, c, d, e, f) {\n              return [\n                  a, c, e,\n                  b, d, f\n              ];\n          },\n      peg$c9 = \"translate\",\n      peg$c10 = peg$literalExpectation(\"translate\", false),\n      peg$c11 = function(tx, ty) {\n              return [\n                  1, 0, tx,\n                  0, 1, ty || 0\n              ];\n          },\n      peg$c12 = \"scale\",\n      peg$c13 = peg$literalExpectation(\"scale\", false),\n      peg$c14 = function(sx, sy) {\n              return [\n                  sx, 0,                     0,\n                  0,  sy === null ? sx : sy, 0\n              ];\n          },\n      peg$c15 = \"rotate\",\n      peg$c16 = peg$literalExpectation(\"rotate\", false),\n      peg$c17 = function(angle, c) {\n              var cos = Math.cos(deg2rad * angle);\n              var sin = Math.sin(deg2rad * angle);\n              if (c !== null) {\n                  var x = c[0];\n                  var y = c[1];\n                  return [\n                      cos, -sin, cos * -x + -sin * -y + x,\n                      sin,  cos, sin * -x +  cos * -y + y\n                  ];\n              }\n              return [\n                  cos, -sin, 0,\n                  sin,  cos, 0\n              ];\n          },\n      peg$c18 = \"skewX\",\n      peg$c19 = peg$literalExpectation(\"skewX\", false),\n      peg$c20 = function(angle) {\n              return [\n                  1, Math.tan(deg2rad * angle), 0,\n                  0, 1,                         0\n              ];\n          },\n      peg$c21 = \"skewY\",\n      peg$c22 = peg$literalExpectation(\"skewY\", false),\n      peg$c23 = function(angle) {\n              return [\n                  1,                         0, 0,\n                  Math.tan(deg2rad * angle), 1, 0\n              ];\n          },\n      peg$c24 = function(f) { return parseFloat(f.join(\"\")); },\n      peg$c25 = function(i) { return parseInt(i.join(\"\")); },\n      peg$c26 = function(n) { return n; },\n      peg$c27 = function(n1, n2) { return [n1, n2]; },\n      peg$c28 = \",\",\n      peg$c29 = peg$literalExpectation(\",\", false),\n      peg$c30 = function(ds) { return ds.join(\"\"); },\n      peg$c31 = function(f) { return f.join(\"\"); },\n      peg$c32 = function(d) { return d.join(\"\"); },\n      peg$c33 = peg$otherExpectation(\"fractionalConstant\"),\n      peg$c34 = \".\",\n      peg$c35 = peg$literalExpectation(\".\", false),\n      peg$c36 = function(d1, d2) { return [d1 ? d1.join(\"\") : null, \".\", d2.join(\"\")].join(\"\"); },\n      peg$c37 = /^[eE]/,\n      peg$c38 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c39 = function(e) { return [e[0], e[1], e[2].join(\"\")].join(\"\"); },\n      peg$c40 = /^[+\\-]/,\n      peg$c41 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c42 = /^[0-9]/,\n      peg$c43 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c44 = /^[ \\t\\r\\n]/,\n      peg$c45 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsetransformList() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsewsp();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetransforms();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsewsp();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsewsp();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c0(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetransforms() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetransform();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecommaWsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecommaWsp();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetransforms();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetransform();\n    }\n\n    return s0;\n  }\n\n  function peg$parsetransform() {\n    var s0;\n\n    s0 = peg$parsematrix();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetranslate();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsescale();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserotate();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseskewX();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseskewY();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsematrix() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c2) {\n      s1 = peg$c2;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWsp();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsenumber();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsecommaWsp();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsenumber();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecommaWsp();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsenumber();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsecommaWsp();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsenumber();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsecommaWsp();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsenumber();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = [];\n                                  s17 = peg$parsewsp();\n                                  while (s17 !== peg$FAILED) {\n                                    s16.push(s17);\n                                    s17 = peg$parsewsp();\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 41) {\n                                      s17 = peg$c6;\n                                      peg$currPos++;\n                                    } else {\n                                      s17 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c8(s5, s7, s9, s11, s13, s15);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetranslate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c9) {\n      s1 = peg$c9;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspNumber();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescale() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c12) {\n      s1 = peg$c12;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c13); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspNumber();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c14(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserotate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c15) {\n      s1 = peg$c15;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c16); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspTwoNumbers();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c17(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewX() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c18) {\n      s1 = peg$c18;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsewsp();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsewsp();\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c6;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c20(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewY() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c21) {\n      s1 = peg$c21;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsewsp();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsewsp();\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c6;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c23(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsesign();\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsefloatingPointConstant();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c24(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsesign();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseintegerConstant();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspNumber() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c26(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspTwoNumbers() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecommaWsp();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsenumber();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c27(s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWsp() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewsp();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomma();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsewsp();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsewsp();\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecomma();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewsp();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewsp();\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomma() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c28;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c29); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseintegerConstant() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c30(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefloatingPointConstant() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsefractionalConstant();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseexponent();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c31(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsedigitSequence();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexponent();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c32(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefractionalConstant() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s2 = peg$c34;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c35); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedigitSequence();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedigitSequence();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c34;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c35); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c32(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c33); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexponent() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (peg$c37.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c38); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsesign();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsedigitSequence();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c39(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsesign() {\n    var s0;\n\n    if (peg$c40.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c41); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigitSequence() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsedigit();\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsedigit();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c42.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c43); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewsp() {\n    var s0;\n\n    if (peg$c44.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c45); }\n    }\n\n    return s0;\n  }\n\n\n      var deg2rad = Math.PI / 180;\n\n      /*\n       ╔═        ═╗   ╔═        ═╗   ╔═     ═╗\n       ║ al cl el ║   ║ ar cr er ║   ║ a c e ║\n       ║ bl dl fl ║ * ║ br dr fr ║ = ║ b d f ║\n       ║ 0  0  1  ║   ║ 0  0  1  ║   ║ 0 0 1 ║\n       ╚═        ═╝   ╚═        ═╝   ╚═     ═╝\n      */\n      function multiply_matrices(l, r) {\n          var al = l[0];\n          var cl = l[1];\n          var el = l[2];\n          var bl = l[3];\n          var dl = l[4];\n          var fl = l[5];\n\n          var ar = r[0];\n          var cr = r[1];\n          var er = r[2];\n          var br = r[3];\n          var dr = r[4];\n          var fr = r[5];\n\n          var a = al * ar + cl * br;\n          var c = al * cr + cl * dr;\n          var e = al * er + cl * fr + el;\n          var b = bl * ar + dl * br;\n          var d = bl * cr + dl * dr;\n          var f = bl * er + dl * fr + fl;\n\n          return [a, c, e, b, d, f];\n      }\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n"]},"metadata":{},"sourceType":"script"}